{"version":3,"sources":["components/getPosts.tsx","components/DownloadButton.tsx","components/PostsList.tsx","App.tsx","index.tsx"],"names":["getDatas","url","a","fetch","getInfo","infoToJson","json","preparedDatas","posts","users","comments","finallyDatas","map","post","user","find","ownerPost","id","userId","postsComments","filter","comment","postId","DownloadButton","dataGeneration","isLoading","type","onClick","disabled","className","PostsList","key","title","body","comm","name","email","App","state","isLoaded","downloadError","filteredValue","searchValue","debounce","f","delay","timerId","clearTimeout","setTimeout","field","e","letter","target","value","setState","filterPost","replace","includes","startSearch","wrapper","then","allPosts","catch","finally","this","filteredPosts","placeholder","onChange","React","PureComponent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43753eb5.chunk.js","sourcesContent":["import { Post, User, Comments } from './interfaces';\n\nconst postsUrl = 'https://jsonplaceholder.typicode.com/posts';\nconst usersUrl = 'https://jsonplaceholder.typicode.com/users';\nconst commentsUrl = 'https://jsonplaceholder.typicode.com/comments';\n\nconst getDatas = async (url: string) => {\n  const getInfo = await fetch(url);\n  const infoToJson = getInfo.json();\n\n  return infoToJson;\n};\n\nexport const preparedDatas = async () => {\n  const posts: Post[] = await getDatas(postsUrl);\n  const users: User[] = await getDatas(usersUrl);\n  const comments: Comments[] = await getDatas(commentsUrl);\n\n  const finallyDatas = posts.map(post => {\n    const user = users.find(ownerPost => ownerPost.id === post.userId);\n    const postsComments = comments.filter(comment => comment.postId === post.id);\n\n    return {\n      ...post,\n      user,\n      comments: postsComments,\n    };\n  });\n\n  return finallyDatas;\n};\n","import React from 'react';\n\ninterface Props {\n  dataGeneration: () => void;\n  isLoading: boolean;\n}\n\nexport const DownloadButton: React.FC<Props> = ({ dataGeneration, isLoading }) => {\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={dataGeneration}\n        disabled={isLoading}\n        className=\"loading-button\"\n      >\n        Get posts\n      </button>\n      {isLoading && (\n        <p className=\"loading-text\">Loading... Please wait!</p>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { Post } from './interfaces';\n\ninterface Props {\n  posts: Post[];\n}\n\nexport const PostsList: React.FC<Props> = ({ posts }) => {\n  return (\n    <>\n      {posts.map(post => (\n        <div className=\"post\" key={post.id}>\n          <p className=\"post__title\">\n            <span className=\"post__id\">\n              {post.id}\n              .\n            </span>\n            {post.title}\n          </p>\n          <p className=\"post__body\">\n            {post.body}\n          </p>\n          {post.comments.map(comm => (\n            <div className=\"post__comm\" key={comm.id}>\n              <div className=\"comm\">\n                <p className=\"comm__name\">\n                  {comm.name}\n                </p>\n                <p className=\"comm__email\">\n                  {comm.email}\n                </p>\n                <p className=\"comm__body\">\n                  {comm.body}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { AppState, Post } from './components/interfaces';\nimport { preparedDatas } from './components/getPosts';\nimport { DownloadButton } from './components/DownloadButton';\nimport { PostsList } from './components/PostsList';\n\nclass App extends React.PureComponent {\n  state: AppState = {\n    posts: [],\n    isLoading: false,\n    isLoaded: false,\n    downloadError: false,\n    filteredValue: '',\n    searchValue: '',\n  };\n\n  debounce = (f: Function, delay: number) => {\n    // Не знаю, как описать setTimeout, как функцию - нельзя.\n    let timerId: any = null;\n\n    const debounced = () => {\n      clearTimeout(timerId);\n      timerId = setTimeout(() => f(), delay);\n    };\n\n    return debounced;\n  };\n\n  field = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const letter = e.target.value;\n\n    this.setState({ searchValue: letter });\n  };\n\n  filterPost = () => {\n    const { filteredValue, posts } = this.state;\n\n    if (!filteredValue) {\n      return posts;\n    }\n\n    return posts\n      .filter(post => (post.title + post.body)\n        .replace(/\\s*/g, ' ')\n        .includes(filteredValue\n          .replace(/\\s*/g, ' ')));\n  };\n\n  startSearch = () => {\n    const { searchValue } = this.state;\n\n    this.setState({ filteredValue: searchValue });\n  };\n\n  wrapper = this.debounce(this.startSearch, 1000);\n\n  dataGeneration = () => {\n    this.setState({ isLoading: true });\n\n    preparedDatas()\n      .then(allPosts => this.setState(() => ({\n        posts: allPosts, isLoaded: true, downloadError: false,\n      })))\n      .catch(() => this.setState(() => ({ downloadError: true })))\n      .finally(() => this.setState(() => ({ isLoading: false })));\n  };\n\n  render() {\n    const {\n      isLoading, isLoaded, searchValue, downloadError,\n    } = this.state;\n    const filteredPosts: Post[] = this.filterPost();\n\n    return (\n      <>\n        <h1 className=\"title\">Posts</h1>\n        {!isLoaded\n          && <DownloadButton isLoading={isLoading} dataGeneration={this.dataGeneration} />}\n        {downloadError && (\n          <p className=\"error\">Loading error, please, try again.</p>\n        )}\n        {isLoaded && (\n          <>\n            <div className=\"inputContainer\">\n              <input\n                type=\"text\"\n                className=\"input\"\n                placeholder=\"write a text for search\"\n                value={searchValue}\n                onChange={(e) => {\n                  this.wrapper();\n                  this.field(e);\n                }}\n              />\n            </div>\n            <PostsList posts={filteredPosts} />\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}